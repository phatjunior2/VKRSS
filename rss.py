import yt_dlp
import requests
import os
from telegram.ext import Updater, CommandHandler, CallbackContext, MessageHandler, Filters
import feedparser
import logging
from telegram import Update
from PIL import Image
from collections import defaultdict
import glob
import json
import subprocess

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = '7063898042:AAEAHf0vF47CvO0DMR3v4FgmEJ3jDtyygb8'
RSS_FEED_URLS = [
    'https://politepol.com/fd/w2s11hAZXmWn.xml',
    'https://www.youtube.com/feeds/videos.xml?channel_id=UC2ar6bIxQyaf9W8cYJ_I55w',
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ URL-–∞–¥—Ä–µ—Å–∞ RSS-–ª–µ–Ω—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
]
CHECK_INTERVAL = 30  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫. 

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def save_data(filename, data):
    with open(filename, 'w') as f:
        json.dump(data, f)

def load_data(filename, default):
    try:
        with open(filename) as f:
            return json.load(f)
    except FileNotFoundError:
        return default

def save_bot_state(active_chats, sent_history):
    save_data('active_chats.json', list(active_chats))
    save_data('sent_history.json', {str(chat_id): list(history) for chat_id, history in sent_history.items()})

def load_bot_state():
    active_chats = set(load_data('active_chats.json', []))
    sent_history = defaultdict(set, {int(chat_id): set(history) for chat_id, history in load_data('sent_history.json', {}).items()})
    return active_chats, sent_history

# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
def convert_webp_to_jpg(thumbnail_filename):
    img = Image.open(thumbnail_filename).convert("RGB")
    jpg_filename = thumbnail_filename.rsplit('.', 1)[0] + ".jpg"
    img.save(jpg_filename, "jpeg")
    os.remove(thumbnail_filename)
    return jpg_filename

def download_audio(video_url):
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤–∏–¥–µ–æ
    if "youtube.com" in video_url or "youtu.be" in video_url:
        format_preference = 'bestaudio/best'
    else:
        format_preference = 'best[height<=360][ext=mp4]'

    ydl_opts = {
        'format': format_preference,
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'm4a',
        }],
        'outtmpl': 'downloads/%(id)s.%(ext)s',
        'writethumbnail': True,
        'quiet': True,
        'ffmpeg_location': '/usr/bin/ffmpeg',
    }



    audio_file = None
    video_title = 'Unknown Title'
    video_uploader = 'Unknown Uploader'
    video_duration = 0
    video_link = video_url
    thumbnail_filename = None

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info_dict = ydl.extract_info(video_url, download=True)
            video_duration = int(info_dict.get('duration', 0))
            if video_duration < 60:
                logger.info(f"Video {video_url} is shorter than 60 seconds, skipping.")
                return None, None, None, None, None, None

            audio_file = ydl.prepare_filename(info_dict).replace('.webm', '.m4a').replace('.mp4', '.m4a')
            video_title = info_dict.get('title', video_title)
            video_uploader = info_dict.get('uploader', video_uploader)
            base_filename = os.path.splitext(audio_file)[0]
            thumbnail_filename = f"{base_filename}.jpg"
            if not os.path.exists(thumbnail_filename):
                webp_filename = f"{base_filename}.webp"
                if os.path.exists(webp_filename):
                    thumbnail_filename = convert_webp_to_jpg(webp_filename)
            return audio_file, video_title, video_uploader, video_duration, video_link, thumbnail_filename
    except Exception as e:
        logger.error(f"Failed to download or process video {video_url}: {e}")
    return None, None, None, None, None, None

def send_audio_file(chat_id, audio_file, title, uploader, duration, link, thumbnail_filename, context):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
    if not os.path.exists(audio_file):
        logger.error(f"Audio file does not exist: {audio_file}")
        return

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–∏–Ω–∏–∞—Ç—é—Ä—ã
    thumb = None
    if thumbnail_filename and os.path.exists(thumbnail_filename):
        try:
            thumb = open(thumbnail_filename, 'rb')
        except Exception as e:
            logger.error(f"Failed to open thumbnail file {thumbnail_filename}: {e}")
            thumb = None  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ–±–Ω—É–ª—è–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
    caption = f'üé¨ <a href="{link}">{title}</a>'

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
    try:
        with open(audio_file, 'rb') as audio:
            context.bot.send_audio(chat_id=chat_id, audio=audio, title=title, performer=uploader, 
                                   duration=duration, thumb=thumb, caption=caption, parse_mode='HTML')
    except Exception as e:
        logger.error(f"Failed to send audio to chat ID {chat_id}: {e}")
    finally:
        if thumb:
            thumb.close()  # –í–∞–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

def embed_thumbnail(audio_file, thumbnail_file):
    output_file = audio_file.replace('.m4a', '_with_cover.m4a')
    cmd = [
        'ffmpeg',
        '-i', audio_file,  # –ò—Å—Ö–æ–¥–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª
        '-i', thumbnail_file,  # –§–∞–π–ª –º–∏–Ω–∏–∞—Ç—é—Ä—ã
        '-map', '0:0',  # –í—ã–±—Ä–∞—Ç—å –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        '-map', '1:0',  # –í—ã–±—Ä–∞—Ç—å –≤–∏–¥–µ–æ–¥–æ—Ä–æ–∂–∫—É (–º–∏–Ω–∏–∞—Ç—é—Ä—É) –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ —Ñ–∞–π–ª–∞
        '-c:v', 'png',  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ PNG
        '-disposition:v', 'attached_pic',  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –æ–±–ª–æ–∂–∫—É
        '-c:a', 'copy',  # –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        output_file  # –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
    ]
    try:
        subprocess.run(cmd, check=True)
        return output_file  # –í–µ—Ä–Ω—É—Ç—å –ø—É—Ç—å –∫ –Ω–æ–≤–æ–º—É —Ñ–∞–π–ª—É —Å –æ–±–ª–æ–∂–∫–æ–π
    except subprocess.CalledProcessError as e:
        logger.error(f"Failed to embed thumbnail: {e}")
        return audio_file  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–µ—Ä–Ω—É—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª


def check_feed(context: CallbackContext):
    for rss_feed_url in RSS_FEED_URLS:
        feed = feedparser.parse(rss_feed_url)
        if feed.entries:
            for latest_entry in feed.entries[:2]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                if any(latest_entry.id not in context.bot_data['sent_history'][chat_id] for chat_id in context.bot_data['active_chats']):
                    audio_file, video_title, video_uploader, video_duration, video_link, thumbnail_filename = download_audio(latest_entry.link)
                    if audio_file and thumbnail_filename:
                        audio_file_with_cover = embed_thumbnail(audio_file, thumbnail_filename)
                        if audio_file_with_cover:
                            for chat_id in context.bot_data['active_chats']:
                                if latest_entry.id not in context.bot_data['sent_history'][chat_id]:
                                    send_audio_file(chat_id, audio_file_with_cover, video_title, video_uploader, video_duration, video_link, thumbnail_filename, context)
                                    context.bot_data['sent_history'][chat_id].add(latest_entry.id)
                            save_bot_state(context.bot_data['active_chats'], context.bot_data['sent_history'])
                            
                            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                            if os.path.exists(audio_file):
                                os.remove(audio_file)
                            if os.path.exists(audio_file_with_cover):
                                os.remove(audio_file_with_cover)
                            if thumbnail_filename and os.path.exists(thumbnail_filename):
                                os.remove(thumbnail_filename)
                    else:
                        logger.info("Video does not meet criteria, skipping.")

def start(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    # –Ø–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ active_chats
    context.bot_data['active_chats'].add(chat_id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ sent_history, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π set
    context.bot_data['sent_history'].setdefault(chat_id, set())
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML
    message_text = (
        "<b>–¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω!</b>\n"
        "–ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç —è –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–Ω–∞–ª—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ. –ï—Å–ª–∏ –Ω–∞ –∫–∞–∫–æ–º-—Ç–æ –∫–∞–Ω–∞–ª–µ –≤—ã–π–¥–µ—Ç –≤–∏–¥–µ–æ, —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª.\n\n"
        "–°–µ–π—á–∞—Å —Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª—ã:\n"
        "‚Ä¢ <a href='https://www.youtube.com/channel/UC-iU28QW_832Fx_3RJ_vYPQ'>–ê–ø–≤–æ—É—Ç</a>\n"
        "‚Ä¢ <a href='https://www.youtube.com/channel/UCMpoPt5DaBcscn1eLQxLCwA'>–¢—É—á–Ω—ã–π –ñ–∞–±</a>\n"
        "‚Ä¢ <a href='https://www.youtube.com/channel/UC2ar6bIxQyaf9W8cYJ_I55w'>–ü–æ–ª–æ—Å–∞—Ç—ã–π –ú—É—Ö</a>\n"
        "‚Ä¢ <a href='https://www.youtube.com/channel/UCQz1XMX-QeSGUyZV7Dtgc5A'>–ì–ª–µ–± –†–∞–Ω–¥–∞–ª–∞–π–Ω–µ–Ω</a>\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É <b>/stop</b>."
    )
    
    update.message.reply_text(message_text, parse_mode='HTML', disable_web_page_preview=True)
    save_bot_state(context.bot_data['active_chats'], context.bot_data['sent_history'])
    
    if not context.job_queue.jobs():
        context.job_queue.run_repeating(check_feed, interval=CHECK_INTERVAL, first=1, context=context)


def stop(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    if chat_id in context.bot_data['active_chats']:
        context.bot_data['active_chats'].remove(chat_id)
        save_bot_state(context.bot_data['active_chats'], context.bot_data['sent_history'])
        update.message.reply_text(
            '<b>–¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –≤—Å–µ—Ö –∞—É–¥–∏–æ –≤—ã–ø—É—Å–∫–æ–≤.</b> –ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É <b>/start</b>',
            parse_mode='HTML'
        )

def main():
    active_chats, sent_history = load_bot_state()  # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.bot_data['active_chats'] = active_chats
    dp.bot_data['sent_history'] = sent_history

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("stop", stop))

    # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ RSS –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∫–æ–º–∞–Ω–¥—ã /start
    job_queue = updater.job_queue
    job_queue.run_repeating(check_feed, interval=CHECK_INTERVAL, first=1)

    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()
